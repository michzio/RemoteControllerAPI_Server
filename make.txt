# Makefile for UNIX        

# the compiler: gcc for C program, define as g++ for C++ 
CC = gcc

# the static library archiver 
AR = ar rcs

# compiler flags: 
# -g enable debugging 
# -Wall turn on all warnings 
# -D__USE_FIXED_PROTOTYPES__  force the compiler to use the correct headers 
# -ansi donâ€™t use GNU extensions, stick to ANSI (c89)
# -std=c99 use newer version
CFLAGS=-g -Wall -D__USE_FIXED_PROTOTYPES__ -std=c99

# libraries 
# OpenCV
ifeq ($(OS),Windows_NT)
	OPENCV_LIBS += C:/opencv/cygwin/lib/libopencv_core310.dll.a
	OPENCV_LIBS += C:/opencv/cygwin/lib/libopencv_imgproc310.dll.a
	OPENCV_LIBS += C:/opencv/cygwin/lib/libopencv_highgui310.dll.a
else
	OPENCV_LIBS = `pkg-config --cflags --libs opencv`
endif

ifneq ($(OS),Windows_NT)
    UNAME_S := $(shell uname -s)
    ifeq ($(UNAME_S),Darwin)
        # OS X
        OS_X_LIBS += -framework ApplicationServices
        OS_X_LIBS += -framework Carbon
        OS_X_LIBS += -framework IOKit
        OS_X_LIBS += -framework AudioToolbox
        OS_X_LIBS += -framework IOSurface
    endif
else
    OS_X_LIBS =
endif

# custom
NETWORKING_INCL_DIR = ../networking
CONCURRENCY_INCL_DIR = ../concurrency
COMMON_FUNCTIONS_INCL_DIR = ../common
COLLECTIONS_INCL_DIR = ../collections
COMPARERS_INCL_DIR = ../comparers
UNIT_TESTS_INCL_DIR = ../unit_tests
LIBPNG_INCL_DIR = ../libpng-1.6.24
ZLIB_INCL_DIR = ../zlib-1.2.8

NETWORKING_LIBRARY = $(NETWORKING_INCL_DIR)/output/debug/lib/static/libnetworking.a
CONCURRENCY_LIBRARY = $(CONCURRENCY_INCL_DIR)/output/debug/lib/static/libconcurrency.a
COMMON_FUNCTIONS_LIBRARY = $(COMMON_FUNCTIONS_INCL_DIR)/output/debug/lib/static/libcommon_functions.a
COLLECTIONS_LIBRARY = $(COLLECTIONS_INCL_DIR)/output/debug/lib/static/libcollections.a
COMPARERS_LIBRARY = $(COMPARERS_INCL_DIR)/output/debug/lib/static/libcomparers.a
UNIT_TESTS_LIBRARY = $(UNIT_TESTS_INCL_DIR)/output/debug/lib/static/libunit_tests.a
LIBPNG_LIBRARY = $(LIBPNG_INCL_DIR)/output/debug/lib/static/liblibpng.a
ZLIB_LIBRARY = $(ZLIB_INCL_DIR)/output/debug/lib/static/libzlib.a

ifneq ($(OS),Windows_NT)
    UNAME_S := $(shell uname -s)
    ifeq ($(UNAME_S),Darwin)
        # custom OS X
        AUTOMATION_SCRIPTS_INCL_DIR = ../system/OS_X/automation_scripts
        COCOA_HELPER_INCL_DIR = ../system/OS_X/cocoa_helper

        AUTOMATION_SCRIPTS_LIBRARY = $(AUTOMATION_SCRIPTS_INCL_DIR)/output/debug/lib/static/libautomation_scripts.a
        COCOA_HELPER_LIBRARY = $(COCOA_HELPER_INCL_DIR)/output/debug/lib/static/libcocoa_helper.a
    endif
else
    AUTOMATION_SCRIPTS_LIBRARY =
    COCOA_HELPER_LIBRARY =
endif

# include headers
INCL_DIRS += -I$(LIBPNG_INCL_DIR)
INCL_DIRS += -I$(ZLIB_INCL_DIR)
ifeq ($(OS),Windows_NT)
    INCL_DIRS += -Ic:/opencv/build/include
else
    INCL_DIRS += -I/usr/local/include
endif
CFLAGS += $(INCL_DIRS)

# the build target executable: 
TARGET = rc_server
LIBRARY = librc_server.a
SHARED_LIBRARY = librc_server.so

# on macOS build .dylib shared library
UNAME_S := $(shell uname -s)
ifeq ($(UNAME_S),Darwin)
	DYNAMIC_LIBRARY= librc_server.dylib
else 
	DYNAMIC_LIBRARY=
endif

# source files 
SOURCE_FILES = runner.o thread.o threads_manager.o datagram.o datagram_server.o generic_server.o passive_connection.o passive_socket.o server_loop.o service.o stream_server.o server.o server_info.o

# test source files 
TEST_SOURCE_FILES = test_server_loop.o test_transfer.o test_transfer_osx.o

# output directories 
OUTPUT_DIR = output/debug
OUTPUT_LIB_DIR = $(OUTPUT_DIR)/lib
OUTPUT_STATIC_LIB_DIR = $(OUTPUT_LIB_DIR)/static
OUTPUT_BIN_DIR = $(OUTPUT_DIR)/bin
OUTPUT_TEST_DIR = $(OUTPUT_DIR)/test

all: directories libraries $(TARGET)

# make output directories
directories: 
	@mkdir -p $(OUTPUT_DIR)
	@mkdir -p $(OUTPUT_LIB_DIR)
	@mkdir -p $(OUTPUT_STATIC_LIB_DIR)
	@mkdir -p $(OUTPUT_BIN_DIR)
	@mkdir -p $(OUTPUT_TEST_DIR)

libraries: $(LIBRARY)

$(TARGET): $(LIBRARY) $(TEST_SOURCE_FILES)
	$(CC) $(CFLAGS) -o $(OUTPUT_BIN_DIR)/$(TARGET) main.c $(OUTPUT_TEST_DIR)/*.o $(OUTPUT_STATIC_LIB_DIR)/$(LIBRARY) $(NETWORKING_LIBRARY) $(CONCURRENCY_LIBRARY) $(COMMON_FUNCTIONS_LIBRARY) $(COLLECTIONS_LIBRARY) $(LIBPNG_LIBRARY) $(ZLIB_LIBRARY) $(COMPARERS_LIBRARY) $(UNIT_TESTS_LIBRARY) $(AUTOMATION_SCRIPTS_LIBRARY) $(COCOA_HELPER_LIBRARY) $(OS_X_LIBS) $(OPENCV_LIBS)

$(LIBRARY): $(SOURCE_FILES)
	$(AR) $(OUTPUT_STATIC_LIB_DIR)/$(LIBRARY) $(OUTPUT_DIR)/*.o

runner.o: concurrency/runner.c concurrency/runner.h
	$(CC) $(CFLAGS) -c concurrency/runner.c  -o $(OUTPUT_DIR)/runner.o

thread.o: concurrency/thread.c concurrency/thread.h 
	$(CC) $(CFLAGS) -c concurrency/thread.c -o $(OUTPUT_DIR)/thread.o

threads_manager.o: concurrency/threads_manager.c concurrency/threads_manager.h
	$(CC) $(CFLAGS) -c concurrency/threads_manager.c -o $(OUTPUT_DIR)/threads_manager.o

datagram.o: networking/datagram.c networking/datagram.h
	$(CC) $(CFLAGS) -c networking/datagram.c -o $(OUTPUT_DIR)/datagram.o

datagram_server.o: networking/datagram_server.c networking/datagram_server.h
	$(CC) $(CFLAGS) -c networking/datagram_server.c -o $(OUTPUT_DIR)/datagram_server.o

generic_server.o: networking/generic_server.c networking/generic_server.h
	$(CC) $(CFLAGS) -c networking/generic_server.c -o $(OUTPUT_DIR)/generic_server.o

passive_connection.o: networking/passive_connection.c networking/passive_connection.h
	$(CC) $(CFLAGS) -c networking/passive_connection.c -o $(OUTPUT_DIR)/passive_connection.o

passive_socket.o: networking/passive_socket.c networking/passive_socket.h
	$(CC) $(CFLAGS) -c networking/passive_socket.c -o $(OUTPUT_DIR)/passive_socket.o

server_loop.o: networking/server_loop.c networking/server_loop.h
	$(CC) $(CFLAGS) -c networking/server_loop.c -o $(OUTPUT_DIR)/server_loop.o

service.o: networking/service.c networking/service.h
	$(CC) $(CFLAGS) -c networking/service.c -o $(OUTPUT_DIR)/service.o

stream_server.o: networking/stream_server.c networking/stream_server.h
	$(CC) $(CFLAGS) -c networking/stream_server.c -o $(OUTPUT_DIR)/stream_server.o

server_info.o: networking/server_info.c networking/server_info.h
	$(CC) $(CFLAGS) -c networking/server_info.c -o $(OUTPUT_DIR)/server_info.o

server.o: server.c server.h
	$(CC) $(CFLAGS) -c server.c -o $(OUTPUT_DIR)/server.o

test_server_loop.o: test/test_server_loop.c test/test_server_loop.h 
	$(CC) $(CFLAGS) -c test/test_server_loop.c -o $(OUTPUT_TEST_DIR)/test_server_loop.o

test_transfer.o: test/test_transfer.c test/test_transfer.h
	$(CC) $(CFLAGS) -c test/test_transfer.c -o $(OUTPUT_TEST_DIR)/test_transfer.o

test_transfer_osx.o: test/test_transfer_osx.c test/test_transfer.h
	$(CC) $(CFLAGS) -c test/test_transfer_osx.c -o $(OUTPUT_TEST_DIR)/test_transfer_osx.o

clean:
	$(RM) -rf $(OUTPUT_DIR)